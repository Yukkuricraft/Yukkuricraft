# This is the template docker-compose config that will generate the actual config used to run.
# We do this because copypasting this seven times is gross when everything is the same minus worldgroup name.
#
# We also get the benefit of being able to effectively "enable" and "disable" world groups due to the dynamic nature.
#
# Variable Interpolations:
# - We have two layers of interpolations in this file.
#   - One is Docker's env var subs. These are denoted by the ${} syntax. These substitute values from the running context's env vars.
#   - The second is our own value injection system. We programatically inject our values in the BaseGenerator class. These use the <<var>> syntax.
#
#


version: "3.4"

x_logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "20"

# These custom_extensions are read by docker_compose_gen.py and used as templates for generating
# the full service definition.
custom_extensions:
  mc_service_template: # Config used to run all world group containers.
    image: yukkuricraft/minecraft-server
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

    # Healthchecks are done by default in the itzg/minecraft-server image
    # https://docker-minecraft-server.readthedocs.io/en/latest/misc/healthcheck/

    tty: true
    stdin_open: true
    restart: unless-stopped
    networks:
      - ycnet
    stop_grace_period: 20s
    environment:
      MOTD: "<<WORLDGROUP>>-${ENV}-${MC_TYPE}_${MC_VERSION}"
      DEBUG: "true"
      EULA: "true"
      REMOVE_OLD_MODS: true
      COPY_PLUGINS_SRC: /yc-plugins
      COPY_PLUGINS_DEST: /data/plugins
      COPY_MODS_SRC: /yc-mods
      COPY_MODS_DEST: /data/mods
      COPY_CONFIG_SRC: /yc-configs
      COPY_CONFIG_DEST: /data
      OVERRIDE_SERVER_PROPERTIES: true
      VERSION: ${MC_VERSION}
      TYPE: ${MC_TYPE}
      PAPER_BUILD: ${PAPER_BUILD}
      STOP_SERVER_ANNOUNCE_DELAY: 10
      UID: ${UID}
      GID: ${GID}
      RCON_PASSWORD_FILE: /rcon.password
      USE_AIKAR_FLAGS: true
      REPLACE_ENV_VARIABLES: true
      ENV_VARIABLE_PREFIX: YC_
      YC_MYSQL_DB: ${YC_MYSQL_DB}
      YC_MYSQL_HOST: ${YC_MYSQL_HOST}
      YC_MYSQL_USER: ${YC_MYSQL_USER}
      YC_MYSQL_PASS: ${YC_MYSQL_PASS}
      YC_POSTGRES_HOST: ${YC_POSTGRES_HOST}
      YC_POSTGRES_USER: ${YC_POSTGRES_USER}
      YC_POSTGRES_PASS: ${YC_POSTGRES_PASS}
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: minecraft
      net.yukkuricraft.container_name: <<WORLDGROUP>>
    volumes:
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/temporarily-bindmounted-plugins-directory:/data/plugins
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/worlds:/worlds-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/plugins:/plugins-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/server-only-mods:/server-only-mods-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/client-and-server-mods:/client-and-server-mods-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/logs:/data/logs
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/crash-reports:/data/crash-reports
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/configs/mods:/modsconfig-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/configs/plugins:/pluginsconfig-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/<<WORLDGROUP>>/configs/server:/serverconfig-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/defaultconfigs:/defaultconfigs-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/defaultmods:/defaultmods-bindmount
      - ${MC_FS_ROOT}/env/${ENV}/minecraft/defaultplugins:/defaultplugins-bindmount
      - mcdata_<<WORLDGROUP>>:/data
      - ${YC_REPO_ROOT}/secrets/rcon.password:/rcon.password

    logging: *default-logging

  mc_backups_sidecar_template:
    image: yukkuricraft/mc-backup-restic
    environment:
      RESTIC_HOSTNAME: YC-${ENV}-<<WORLDGROUP>>
      # Restic will also tag with <<WORLDGROUP>> as it also tags whatever BACKUP_NAME is.
      RESTIC_ADDITIONAL_TAGS: ${ENV}
      BACKUP_NAME: <<WORLDGROUP>>
      BACKUP_INTERVAL: "2h"
      BACKUP_METHOD: restic
      SRC_DIR: /worlds-bindmount
      RCON_HOST: set-by-generator
      RCON_PASSWORD_FILE: /rcon.password
      RESTIC_REPOSITORY: /backups
      RESTIC_PASSWORD_FILE: /restic.password
      PRUNE_RESTIC_RETENTION: --keep-last 24 --keep-daily 14 --keep-weekly 8 --keep-monthly 24 --keep-yearly 666
      PAUSE_IF_NO_PLAYERS: false
      ENTRYPOINT_TARGET: /usr/bin/backup loop
      # since this service waits for mc to be healthy, no initial delay is needed
      INITIAL_DELAY: 0
    depends_on: {}
    networks:
      - ycnet
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: backup
      net.yukkuricraft.container_name: <<WORLDGROUP>>_backup
    volumes:
      - ${YC_REPO_ROOT}/secrets/restic.password:/restic.password
      - ${YC_REPO_ROOT}/secrets/rcon.password:/rcon.password
      - ${BACKUPS_ROOT}/restic:/backups
    volumes_from:
      - mc_<<WORLDGROUP>>:ro
    logging: *default-logging

  velocity_template:
    depends_on: {}
    image: itzg/bungeecord
    environment:
      DEBUG: "false"
      TYPE: "VELOCITY"
      SYNC_SKIP_NEWER_IN_DESTINATION: "false"
      VELOCITY_VERSION: "${VELOCITY_VERSION:-3.3.0-SNAPSHOT}"
      VELOCITY_BUILD_ID: "${VELOCITY_BUILD_ID:-latest}"
      MEMORY: 1G
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: velocity
      net.yukkuricraft.container_name: velocity
    volumes:
      - velocity-${ENV}:/server
      - ${YC_REPO_ROOT}/gen/velocity-${ENV}.toml:/config/velocity.toml
      - ${YC_REPO_ROOT}/secrets/velocity/forwarding.secret:/config/forwarding.secret
    ports:
      - "${VELOCITY_PORT}:25577"
    networks:
      - ycnet
    logging: *default-logging

# "Static" services
services:
  mysql:
    container_name: YC-${ENV}-mysql
    image: mysql:8.1
    env_file:
      - ./secrets/minecraft_db.env
    user: "${UID}:${GID}"
    volumes:
      - ${MC_FS_ROOT}/env/${ENV}/mysql:/var/lib/mysql
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: mysql
      net.yukkuricraft.container_name: mysql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3306"]
      interval: 10s
      timeout: 10s
      retries: 15
    networks:
      - ycnet
    logging: *default-logging

  mysql_backup:
    image: yukkuricraft/mysql-backup-restic
    depends_on:
      mysql:
        condition: service_healthy
    env_file:
      - ./secrets/mysql_backup_restic_config
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: backup
      net.yukkuricraft.container_name: mysql_backup
    environment:
      BACKUP_NAME: mysql
      RESTIC_ADDITIONAL_TAGS: ${ENV}
      RESTIC_HOSTNAME: YC-${ENV}-mysql
      RESTIC_REPOSITORY: /backups
      RESTIC_PASSWORD_FILE: /restic.password
      PRUNE_BACKUPS_DAYS: 7
      PRUNE_RESTIC_RETENTION: --keep-last 8 --keep-daily 7 --keep-weekly 8 --keep-monthly 24 --keep-yearly 666
      DB_SERVER: YC-${ENV}-mysql
      DB_USER: root
      DB_PORT: 3306
      DB_DUMP_TARGET: /mysqldump
      SRC_DIR: /mysqldump
      DEST_DIR: /backups
      MYSQLDUMP_OPTS: --quick --single-transaction
      ENTRYPOINT_TARGET: /entrypoint
      DB_DUMP_FREQ: 360 # Minutes
    volumes:
      - /mysqldump
      - ${YC_REPO_ROOT}/secrets/restic.password:/restic.password
      - ${BACKUPS_ROOT}/restic:/backups
    networks:
      - ycnet
    logging: *default-logging

  postgres:
    container_name: YC-${ENV}-postgres
    image: postgres:16.0
    environment:
      POSTGRES_USER: mine
      POSTGRES_PASSWORD_FILE: /secrets/postgres_pw
    user: "${UID}:${GID}"
    volumes:
      - ${MC_FS_ROOT}/env/${ENV}/postgres:/var/lib/postgresql/data
      - ${YC_REPO_ROOT}/secrets/postgres_pw:/secrets/postgres_pw
      - /etc/passwd:/etc/passwd:ro # Neat hack. Initdb needs a valid system user but it just checks /etc/passwd so...
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: postgres
      net.yukkuricraft.container_name: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 10s
      retries: 15
    networks:
      - ycnet
    logging: *default-logging

  # TODO: Postgres backup. prodrigestivill/postgres-backup-local

  redis:
    image: redis:7.2-rc2
    volumes:
      - redisdata:/data
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: redis 
      net.yukkuricraft.container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 15
    networks:
      - ycnet
    logging: *default-logging

# Volumes will also be dynamically generated for each "enabled" world group.
volumes:
  dbdata:
  pgdata:
  redisdata:

# Networks will be automatically generated as ycnet-${ENV}
networks:
  ycnet:
