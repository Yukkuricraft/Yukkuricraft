# This is the template docker-compose config that will generate the actual config used to run.
# We do this because copypasting this seven times is gross when everything is the same minus worldgroup name.
#
# We also get the benefit of being able to effectively "enable" and "disable" world groups due to the dynamic nature.
#
# Variable Interpolations:
# - We have two layers of interpolations in this file.
#   - One is Docker's env var subs. These are denoted by the ${} syntax. These substitute values from the running context's env vars.
#   - The second is our own value injection system. We programatically inject our values in the BaseGenerator class.
#
#


version: "3.4"

custom_extensions:
  mc_service_template: # Config used to run all world group containers.
    image: yukkuricraft/minecraft-server
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

    # Healthchecks are done by default in the itzg/minecraft-server image
    # https://docker-minecraft-server.readthedocs.io/en/latest/misc/healthcheck/

    tty: true
    stdin_open: true
    restart: unless-stopped
    networks:
      - ycnet
    environment:
      YC_ENV: ${ENV_TYPE}
      MOTD: "<<WORLDGROUP>>-${ENV_TYPE}-${MC_TYPE}_${MC_VERSION}[${PAPER_BUILD}]"
      DEBUG: "true"
      EULA: "true"
      COPY_PROD_WORLD: ${COPY_PROD_WORLD}
      COPY_PROD_PLUGINS: ${COPY_PROD_PLUGINS}
      VERSION: ${MC_VERSION}
      TYPE: ${MC_TYPE}
      PAPER_BUILD: ${PAPER_BUILD}
      STOP_SERVER_ANNOUNCE_DELAY: 5
      COPY_CONFIG_DEST: /data
      EXEC_DIRECTLY: "true"
      UID: ${UID}
      GID: ${GID}
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: minecraft
    volumes:
      - type: bind
        source: ${MC_FS_ROOT}/env/prod/<<WORLDGROUP>>/worlds # This should always mount prod
        target: /worlds-bindmount-prod
        read_only: ${BINDMOUNT_RO}
        bind:
          create_host_path: true
      - type: bind
        source: ${MC_FS_ROOT}/env/prod/<<WORLDGROUP>>/plugins # This should always mount prod
        target: /plugins-bindmount-prod
        read_only: ${BINDMOUNT_RO}
        bind:
          create_host_path: true
      - mcdata_<<WORLDGROUP>>:/data
      - ${YC_REPO_ROOT}/secrets/configs/${ENV}/worlds/default:/yc-default-configs
      - ${YC_REPO_ROOT}/secrets/configs/${ENV}/worlds/<<WORLDGROUP>>/plugins:/yc-plugin-configs
      - ${YC_REPO_ROOT}/secrets/configs/${ENV}/worlds/<<WORLDGROUP>>/server:/yc-server-configs
      - ${MC_FS_ROOT}/logs/${ENV}/worlds/<<WORLDGROUP>>/:/data/logs
      - ycworldsvolume_<<WORLDGROUP>>:/worlds-volume-dev # This volume is unused in prod. Only in dev.
      - ycpluginsvolume_<<WORLDGROUP>>:/plugins-volume-dev # Also unused in prod

  velocity_template:
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    image: itzg/bungeecord
    environment:
      DEBUG: "false"
      TYPE: "VELOCITY"
      SYNC_SKIP_NEWER_IN_DESTINATION: "false"
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: velocity
      net.yukkuricraft.container_name: velocity
    volumes:
      - velocity-${ENV}:/server
      - ${YC_REPO_ROOT}/gen/velocity-${ENV}.toml:/config/velocity.toml
      - ${YC_REPO_ROOT}/secrets/velocity/forwarding.secret:/config/forwarding.secret
    ports:
      - "${VELOCITY_PORT}:25577"
    networks:
      - ycnet

# "Static" services
services:
  mysql:
    image: mysql:5.7
    env_file:
      - ./secrets/db.env
    volumes:
      - dbdata:/var/lib/mysql
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: mysql
      net.yukkuricraft.container_name: mysql
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3306"]
        interval: 10s
        timeout: 10s
        retries: 15
    networks:
      - ycnet

  redis:
    image: redis:7.2-rc2
    volumes:
        - redisdata:/data
    labels:
      net.yukkuricraft.env: ${ENV}
      net.yukkuricraft.container_type: redis 
      net.yukkuricraft.container_name: redis
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 10s
        retries: 15
    networks:
      - ycnet

# Volumes will also be dynamically generated for each "enabled" world group.
volumes:
  dbdata:
  redisdata:

# Networks will be automatically generated as ycnet-${ENV}
networks:
  ycnet:
