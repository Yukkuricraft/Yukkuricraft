#!/bin/env python3

import copy
import yaml  # type: ignore

yaml.SafeDumper.add_representer(
    type(None),
    lambda dumper, value: dumper.represent_scalar("tag:yaml.org,2002:null", ""),
)

from typing import Dict

from src.constants import DOCKER_COMPOSE_TEMPLATE_NAME, CONFIG_NAME
from src.common.config import YamlConfig, load_env_config, load_yaml_config


class Generator:
    env_config: Dict[str, str]

    world_group_config: YamlConfig
    docker_compose_template: YamlConfig

    generated_config_name: str
    generated_config: dict = {}

    def __init__(self, env: str):
        self.env = env
        self.generated_config_name = f"docker-compose-{self.env}.yml"

        self.env_config = load_env_config(f"env/{env}.env")
        self.world_group_config = load_yaml_config(CONFIG_NAME)
        self.docker_compose_template = load_yaml_config(DOCKER_COMPOSE_TEMPLATE_NAME)

    def replace_interpolations(self, inp, replace_value: str):
        """
        Please for the love of god refactor me in the future.
        """
        if type(inp) == list:
            return [self.replace_interpolations(item, replace_value) for item in inp]
        elif type(inp) == dict:
            return {
                self.replace_interpolations(
                    key, replace_value
                ): self.replace_interpolations(value, replace_value)
                for key, value in inp.items()
            }
        elif type(inp) == str:
            return inp.replace("<<WORLDGROUP>>", replace_value)
        else:
            return inp

    def generate_config(self):

        # Add version
        self.generated_config["version"] = self.docker_compose_template.version

        # Add services
        services = self.docker_compose_template.services.as_dict()
        for world in self.world_group_config.world_groups:
            foo = (
                self.docker_compose_template.custom_extensions.mc_service_template.as_dict()
            )
            service_template = copy.deepcopy(
                self.docker_compose_template.custom_extensions.mc_service_template.as_dict()
            )
            service_template = self.replace_interpolations(service_template, world)

            services[f"mc_{world}"] = service_template
        self.generated_config["services"] = services

        # Add volumes
        volumes = self.docker_compose_template.volumes.as_dict()
        volumes[f"dbdata-{self.env}"] = None
        volumes[f"certs-{self.env}"] = {
            "driver": "local",
            "driver_opts": {
                "type": "none",
                "o": "bind",
                "device": f"{self.env_config['MC_FS_ROOT']}/{self.env}/certs",
            },
        }
        for world in self.world_group_config.world_groups:
            volumes[f"mcdata_{world}"] = None
            volumes[f"ycworldsvolume_{world}"] = None
            volumes[f"ycpluginsvolume_{world}"] = None
        self.generated_config["volumes"] = volumes

        # Add networks
        self.generated_config[
            "networks"
        ] = self.docker_compose_template.networks.as_dict()

    def dump_config(self):
        print("Generating new docker-compose.yml...")
        with open(self.generated_config_name, "w") as f:
            f.write(
                "#\n# THIS FILE IS AUTOMATICALLY GENERATED.\n# CHANGES WILL BE OVERWRITTEN ON RESTART.\n#\n\n"
            )
            f.write(
                yaml.safe_dump(
                    self.generated_config, default_flow_style=False, sort_keys=False
                )
            )
        print("Done.")

    def run(self):
        self.generate_config()
        self.dump_config()
