services:
  # https://qmacro.org/blog/posts/2023/12/22/using-the-docker-cli-in-a-container-on-macos/
  # Docker on Mac doesn't actually run on the host but rather inside a linux VM.
  # This means mounting "/var/run/docker.sock" from the host into yc-api doesn't actually mean we're
  # mounting the "real" docker sock, but rather the one that exists within the linux VM,
  # This only works if running as the root user due to permission issues but we don't want to do that for yc-api
  # Thus the hacky workaround is to have a dedicated socat container piping the docker socket to a tcp connection while
  # it runs as root.
  # Gross.
  socat:
    container_name: socat
    image: alpine/socat
    restart: 'unless-stopped'
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: 'tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock'
    networks:
      - yc-web-dev

  # For yakumo-dash, run yakumo-dash-dev from yakumo-dash repo.
  yc-api:
    container_name: yc-api
    hostname: ${HOST_HOSTNAME}
    image: yukkuricraft/yc-docker-api
    restart: 'unless-stopped'
    depends_on:
      yc-api-mysql:
        condition: service_healthy
      socat:
        condition: service_started
    environment:
      DOCKER_HOST: tcp://socat:2375
      VIRTUAL_HOST: ${API_HOST}
      VIRTUAL_PORT: 5001
      LETSENCRYPT_HOST: ${API_HOST}
      HOST_YC_REPO_ROOT: ${YC_REPO_ROOT}
      MC_FS_ROOT: ${MC_FS_ROOT}
      CONFIGURATION_TYPE: ${CONFIGURATION_TYPE}

    volumes:
      - ./src:/app/src
      - ./gen:/app/gen
      - ${MC_FS_ROOT}/:${MC_FS_ROOT}
      - /etc/passwd:/etc/host-passwd
    networks:
      - yc-web-dev
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "10"

  yc-api-filebrowser:
    container_name: yc-api-filebrowser
    hostname: yc-api-filebrowser
    image: filebrowser/filebrowser
    restart: 'unless-stopped'
    user: '${UID}:${GID}'
    networks:
      - yc-web-dev
    environment:
      VIRTUAL_HOST: ${FILEBROWSER_HOST}
      VIRTUAL_PORT: ${FILEBROWSER_PORT}
      LETSENCRYPT_HOST: ${FILEBROWSER_HOST}
    volumes:
    - ${MC_FS_ROOT}/db/filebrowser.db:/database.db
    - ${MC_FS_ROOT}/env:/srv
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "10"

  yc-api-mysql:
    platform: linux/amd64
    container_name: yc-api-mysql
    image: mysql:5.7
    restart: 'unless-stopped'
    env_file:
      - ./secrets/api_db.env
    ports:
      - "3366:3306"
    volumes:
      # See https://github.com/docker-library/mysql/issues/939 for why it's not a host mount
      - apidb:/var/lib/mysql
    networks:
      - yc-web-dev
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "--password=${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 10s
      retries: 15
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "10"

  nginx-proxy:
    container_name: nginx-proxy
    image: yukkuricraft/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - yc-web-dev
    restart: 'unless-stopped'
    depends_on:
      socat:
        condition: service_started
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "10"

volumes:
  envconfigs:
  certs:
  html:
  vhost:
  acme:
  apidb:

networks:
  yc-web-dev:
